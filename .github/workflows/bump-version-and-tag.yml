name: Version Bump and Tag

on:
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version bump type'
        required: false
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
      custom_version:
        description: 'Custom version (optional, overrides version_type)'
        required: false
        type: string

jobs:
  version-and-tag:
    runs-on: ubuntu-latest
    permissions:
      contents: write # Need write permission to push tags
      packages: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0 # Fetch full history for proper versioning

      - name: Configure Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Bump version
        id: version
        run: |
          if [ -n "${{ github.event.inputs.custom_version }}" ]; then
            # Use custom version if provided
            NEW_VERSION="${{ github.event.inputs.custom_version }}"
            yarn version --new-version "$NEW_VERSION" --no-git-tag-version
            echo "new_version=v$NEW_VERSION" >> $GITHUB_OUTPUT
          else
            # Use version type (patch, minor, major)
            VERSION_TYPE="${{ github.event.inputs.version_type }}"
            yarn version --$VERSION_TYPE --no-git-tag-version
            NEW_VERSION=$(node -p "require('./package.json').version")
            echo "new_version=v$NEW_VERSION" >> $GITHUB_OUTPUT
          fi

      - name: Commit version change
        run: |
          git add package.json
          git commit -m "chore: bump version to ${{ steps.version.outputs.new_version }}"

      - name: Create and push tag
        run: |
          git tag v.${{ steps.version.outputs.new_version }}
          git push origin main
          git push origin v.${{ steps.version.outputs.new_version }}

      - name: Output new version
        run: |
          echo "ðŸŽ‰ Successfully created and pushed tag: ${{ steps.version.outputs.new_version }}"
